// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewAdminProposed extends ethereum.Event {
  get params(): NewAdminProposed__Params {
    return new NewAdminProposed__Params(this);
  }
}

export class NewAdminProposed__Params {
  _event: NewAdminProposed;

  constructor(event: NewAdminProposed) {
    this._event = event;
  }

  get currentAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserGranted extends ethereum.Event {
  get params(): PauserGranted__Params {
    return new PauserGranted__Params(this);
  }
}

export class PauserGranted__Params {
  _event: PauserGranted;

  constructor(event: PauserGranted) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRevoked extends ethereum.Event {
  get params(): PauserRevoked__Params {
    return new PauserRevoked__Params(this);
  }
}

export class PauserRevoked__Params {
  _event: PauserRevoked;

  constructor(event: PauserRevoked) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTDriver__mintInputUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class NFTDriver__mintWithSaltInputUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class NFTDriver__safeMintInputUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class NFTDriver__safeMintWithSaltInputUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class NFTDriver__setDripsInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class NFTDriver__setDripsInputNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class NFTDriver extends ethereum.SmartContract {
  static bind(address: Address): NFTDriver {
    return new NFTDriver("NFTDriver", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPausers(): Array<Address> {
    let result = super.call("allPausers", "allPausers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allPausers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allPausers", "allPausers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcTokenIdWithSalt(minter: Address, salt: BigInt): BigInt {
    let result = super.call(
      "calcTokenIdWithSalt",
      "calcTokenIdWithSalt(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcTokenIdWithSalt(
    minter: Address,
    salt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcTokenIdWithSalt",
      "calcTokenIdWithSalt(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(tokenId: BigInt, erc20: Address, transferTo: Address): BigInt {
    let result = super.call(
      "collect",
      "collect(uint256,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(transferTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_collect(
    tokenId: BigInt,
    erc20: Address,
    transferTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect(uint256,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(transferTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dripsHub(): Address {
    let result = super.call("dripsHub", "dripsHub():(address)", []);

    return result[0].toAddress();
  }

  try_dripsHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("dripsHub", "dripsHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  driverId(): BigInt {
    let result = super.call("driverId", "driverId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_driverId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("driverId", "driverId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(pauser: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(pauser: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSaltUsed(minter: Address, salt: BigInt): boolean {
    let result = super.call("isSaltUsed", "isSaltUsed(address,uint64):(bool)", [
      ethereum.Value.fromAddress(minter),
      ethereum.Value.fromUnsignedBigInt(salt)
    ]);

    return result[0].toBoolean();
  }

  try_isSaltUsed(minter: Address, salt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSaltUsed",
      "isSaltUsed(address,uint64):(bool)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(
    to: Address,
    userMetadata: Array<NFTDriver__mintInputUserMetadataStruct>
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint(
    to: Address,
    userMetadata: Array<NFTDriver__mintInputUserMetadataStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintWithSalt(
    salt: BigInt,
    to: Address,
    userMetadata: Array<NFTDriver__mintWithSaltInputUserMetadataStruct>
  ): BigInt {
    let result = super.call(
      "mintWithSalt",
      "mintWithSalt(uint64,address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintWithSalt(
    salt: BigInt,
    to: Address,
    userMetadata: Array<NFTDriver__mintWithSaltInputUserMetadataStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintWithSalt",
      "mintWithSalt(uint64,address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposedAdmin(): Address {
    let result = super.call("proposedAdmin", "proposedAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_proposedAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposedAdmin",
      "proposedAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  safeMint(
    to: Address,
    userMetadata: Array<NFTDriver__safeMintInputUserMetadataStruct>
  ): BigInt {
    let result = super.call(
      "safeMint",
      "safeMint(address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_safeMint(
    to: Address,
    userMetadata: Array<NFTDriver__safeMintInputUserMetadataStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMint",
      "safeMint(address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeMintWithSalt(
    salt: BigInt,
    to: Address,
    userMetadata: Array<NFTDriver__safeMintWithSaltInputUserMetadataStruct>
  ): BigInt {
    let result = super.call(
      "safeMintWithSalt",
      "safeMintWithSalt(uint64,address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_safeMintWithSalt(
    salt: BigInt,
    to: Address,
    userMetadata: Array<NFTDriver__safeMintWithSaltInputUserMetadataStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMintWithSalt",
      "safeMintWithSalt(uint64,address,(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setDrips(
    tokenId: BigInt,
    erc20: Address,
    currReceivers: Array<NFTDriver__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<NFTDriver__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt,
    transferTo: Address
  ): BigInt {
    let result = super.call(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32,address):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2),
        ethereum.Value.fromAddress(transferTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_setDrips(
    tokenId: BigInt,
    erc20: Address,
    currReceivers: Array<NFTDriver__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<NFTDriver__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt,
    transferTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32,address):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2),
        ethereum.Value.fromAddress(transferTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dripsHub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get forwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _driverId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get transferTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmitUserMetadataCall extends ethereum.Call {
  get inputs(): EmitUserMetadataCall__Inputs {
    return new EmitUserMetadataCall__Inputs(this);
  }

  get outputs(): EmitUserMetadataCall__Outputs {
    return new EmitUserMetadataCall__Outputs(this);
  }
}

export class EmitUserMetadataCall__Inputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get userMetadata(): Array<EmitUserMetadataCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      EmitUserMetadataCallUserMetadataStruct
    >();
  }
}

export class EmitUserMetadataCall__Outputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }
}

export class EmitUserMetadataCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class GrantPauserCall extends ethereum.Call {
  get inputs(): GrantPauserCall__Inputs {
    return new GrantPauserCall__Inputs(this);
  }

  get outputs(): GrantPauserCall__Outputs {
    return new GrantPauserCall__Outputs(this);
  }
}

export class GrantPauserCall__Inputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantPauserCall__Outputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userMetadata(): Array<MintCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      MintCallUserMetadataStruct
    >();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class MintWithSaltCall extends ethereum.Call {
  get inputs(): MintWithSaltCall__Inputs {
    return new MintWithSaltCall__Inputs(this);
  }

  get outputs(): MintWithSaltCall__Outputs {
    return new MintWithSaltCall__Outputs(this);
  }
}

export class MintWithSaltCall__Inputs {
  _call: MintWithSaltCall;

  constructor(call: MintWithSaltCall) {
    this._call = call;
  }

  get salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get userMetadata(): Array<MintWithSaltCallUserMetadataStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      MintWithSaltCallUserMetadataStruct
    >();
  }
}

export class MintWithSaltCall__Outputs {
  _call: MintWithSaltCall;

  constructor(call: MintWithSaltCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintWithSaltCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeNewAdminCall extends ethereum.Call {
  get inputs(): ProposeNewAdminCall__Inputs {
    return new ProposeNewAdminCall__Inputs(this);
  }

  get outputs(): ProposeNewAdminCall__Outputs {
    return new ProposeNewAdminCall__Outputs(this);
  }
}

export class ProposeNewAdminCall__Inputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeNewAdminCall__Outputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall extends ethereum.Call {
  get inputs(): RenounceAdminCall__Inputs {
    return new RenounceAdminCall__Inputs(this);
  }

  get outputs(): RenounceAdminCall__Outputs {
    return new RenounceAdminCall__Outputs(this);
  }
}

export class RenounceAdminCall__Inputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall__Outputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RevokePauserCall extends ethereum.Call {
  get inputs(): RevokePauserCall__Inputs {
    return new RevokePauserCall__Inputs(this);
  }

  get outputs(): RevokePauserCall__Outputs {
    return new RevokePauserCall__Outputs(this);
  }
}

export class RevokePauserCall__Inputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokePauserCall__Outputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userMetadata(): Array<SafeMintCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SafeMintCallUserMetadataStruct
    >();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeMintCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class SafeMintWithSaltCall extends ethereum.Call {
  get inputs(): SafeMintWithSaltCall__Inputs {
    return new SafeMintWithSaltCall__Inputs(this);
  }

  get outputs(): SafeMintWithSaltCall__Outputs {
    return new SafeMintWithSaltCall__Outputs(this);
  }
}

export class SafeMintWithSaltCall__Inputs {
  _call: SafeMintWithSaltCall;

  constructor(call: SafeMintWithSaltCall) {
    this._call = call;
  }

  get salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get userMetadata(): Array<SafeMintWithSaltCallUserMetadataStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SafeMintWithSaltCallUserMetadataStruct
    >();
  }
}

export class SafeMintWithSaltCall__Outputs {
  _call: SafeMintWithSaltCall;

  constructor(call: SafeMintWithSaltCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeMintWithSaltCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDripsCall extends ethereum.Call {
  get inputs(): SetDripsCall__Inputs {
    return new SetDripsCall__Inputs(this);
  }

  get outputs(): SetDripsCall__Outputs {
    return new SetDripsCall__Outputs(this);
  }
}

export class SetDripsCall__Inputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SetDripsCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDripsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsCallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDripsCallNewReceiversStruct
    >();
  }

  get maxEndHint1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxEndHint2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get transferTo(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetDripsCall__Outputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDripsCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsCallNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receivers(): Array<SetSplitsCallReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }
}

export class SetSplitsCallReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
