// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Collectable extends ethereum.Event {
  get params(): Collectable__Params {
    return new Collectable__Params(this);
  }
}

export class Collectable__Params {
  _event: Collectable;

  constructor(event: Collectable) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collected(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DripsReceiverSeen extends ethereum.Event {
  get params(): DripsReceiverSeen__Params {
    return new DripsReceiverSeen__Params(this);
  }
}

export class DripsReceiverSeen__Params {
  _event: DripsReceiverSeen;

  constructor(event: DripsReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get config(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DripsSet extends ethereum.Event {
  get params(): DripsSet__Params {
    return new DripsSet__Params(this);
  }
}

export class DripsSet__Params {
  _event: DripsSet;

  constructor(event: DripsSet) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get dripsHistoryHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get balance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxEnd(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DriverAddressUpdated extends ethereum.Event {
  get params(): DriverAddressUpdated__Params {
    return new DriverAddressUpdated__Params(this);
  }
}

export class DriverAddressUpdated__Params {
  _event: DriverAddressUpdated;

  constructor(event: DriverAddressUpdated) {
    this._event = event;
  }

  get driverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldDriverAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDriverAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DriverRegistered extends ethereum.Event {
  get params(): DriverRegistered__Params {
    return new DriverRegistered__Params(this);
  }
}

export class DriverRegistered__Params {
  _event: DriverRegistered;

  constructor(event: DriverRegistered) {
    this._event = event;
  }

  get driverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get driverAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Given extends ethereum.Event {
  get params(): Given__Params {
    return new Given__Params(this);
  }
}

export class Given__Params {
  _event: Given;

  constructor(event: Given) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewAdminProposed extends ethereum.Event {
  get params(): NewAdminProposed__Params {
    return new NewAdminProposed__Params(this);
  }
}

export class NewAdminProposed__Params {
  _event: NewAdminProposed;

  constructor(event: NewAdminProposed) {
    this._event = event;
  }

  get currentAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserGranted extends ethereum.Event {
  get params(): PauserGranted__Params {
    return new PauserGranted__Params(this);
  }
}

export class PauserGranted__Params {
  _event: PauserGranted;

  constructor(event: PauserGranted) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRevoked extends ethereum.Event {
  get params(): PauserRevoked__Params {
    return new PauserRevoked__Params(this);
  }
}

export class PauserRevoked__Params {
  _event: PauserRevoked;

  constructor(event: PauserRevoked) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReceivedDrips extends ethereum.Event {
  get params(): ReceivedDrips__Params {
    return new ReceivedDrips__Params(this);
  }
}

export class ReceivedDrips__Params {
  _event: ReceivedDrips;

  constructor(event: ReceivedDrips) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get receivableCycles(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Split extends ethereum.Event {
  get params(): Split__Params {
    return new Split__Params(this);
  }
}

export class Split__Params {
  _event: Split;

  constructor(event: Split) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SplitsReceiverSeen extends ethereum.Event {
  get params(): SplitsReceiverSeen__Params {
    return new SplitsReceiverSeen__Params(this);
  }
}

export class SplitsReceiverSeen__Params {
  _event: SplitsReceiverSeen;

  constructor(event: SplitsReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SplitsSet extends ethereum.Event {
  get params(): SplitsSet__Params {
    return new SplitsSet__Params(this);
  }
}

export class SplitsSet__Params {
  _event: SplitsSet;

  constructor(event: SplitsSet) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SqueezedDrips extends ethereum.Event {
  get params(): SqueezedDrips__Params {
    return new SqueezedDrips__Params(this);
  }
}

export class SqueezedDrips__Params {
  _event: SqueezedDrips;

  constructor(event: SqueezedDrips) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get senderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dripsHistoryHashes(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserMetadataEmitted extends ethereum.Event {
  get params(): UserMetadataEmitted__Params {
    return new UserMetadataEmitted__Params(this);
  }
}

export class UserMetadataEmitted__Params {
  _event: UserMetadataEmitted;

  constructor(event: UserMetadataEmitted) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get key(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DripsHub__balanceAtInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__dripsStateResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getDripsHash(): Bytes {
    return this.value0;
  }

  getDripsHistoryHash(): Bytes {
    return this.value1;
  }

  getUpdateTime(): BigInt {
    return this.value2;
  }

  getBalance(): BigInt {
    return this.value3;
  }

  getMaxEnd(): BigInt {
    return this.value4;
  }
}

export class DripsHub__hashDripsInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__hashSplitsInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__setDripsInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__setDripsInputNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__splitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectableAmt(): BigInt {
    return this.value0;
  }

  getSplitAmt(): BigInt {
    return this.value1;
  }
}

export class DripsHub__splitInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__splitResultResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectableAmt(): BigInt {
    return this.value0;
  }

  getSplitAmt(): BigInt {
    return this.value1;
  }
}

export class DripsHub__splitResultInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__squeezeDripsInputDripsHistoryStruct extends ethereum.Tuple {
  get dripsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<
    DripsHub__squeezeDripsInputDripsHistoryReceiversStruct
  > {
    return this[1].toTupleArray<
      DripsHub__squeezeDripsInputDripsHistoryReceiversStruct
    >();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class DripsHub__squeezeDripsInputDripsHistoryReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub__squeezeDripsResultInputDripsHistoryStruct extends ethereum.Tuple {
  get dripsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<
    DripsHub__squeezeDripsResultInputDripsHistoryReceiversStruct
  > {
    return this[1].toTupleArray<
      DripsHub__squeezeDripsResultInputDripsHistoryReceiversStruct
    >();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class DripsHub__squeezeDripsResultInputDripsHistoryReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class DripsHub extends ethereum.SmartContract {
  static bind(address: Address): DripsHub {
    return new DripsHub("DripsHub", address);
  }

  AMT_PER_SEC_EXTRA_DECIMALS(): i32 {
    let result = super.call(
      "AMT_PER_SEC_EXTRA_DECIMALS",
      "AMT_PER_SEC_EXTRA_DECIMALS():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_AMT_PER_SEC_EXTRA_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "AMT_PER_SEC_EXTRA_DECIMALS",
      "AMT_PER_SEC_EXTRA_DECIMALS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  AMT_PER_SEC_MULTIPLIER(): BigInt {
    let result = super.call(
      "AMT_PER_SEC_MULTIPLIER",
      "AMT_PER_SEC_MULTIPLIER():(uint160)",
      []
    );

    return result[0].toBigInt();
  }

  try_AMT_PER_SEC_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AMT_PER_SEC_MULTIPLIER",
      "AMT_PER_SEC_MULTIPLIER():(uint160)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DRIVER_ID_OFFSET(): BigInt {
    let result = super.call(
      "DRIVER_ID_OFFSET",
      "DRIVER_ID_OFFSET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DRIVER_ID_OFFSET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DRIVER_ID_OFFSET",
      "DRIVER_ID_OFFSET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_DRIPS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_DRIPS_RECEIVERS",
      "MAX_DRIPS_RECEIVERS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_DRIPS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DRIPS_RECEIVERS",
      "MAX_DRIPS_RECEIVERS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SPLITS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SPLITS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOTAL_BALANCE(): BigInt {
    let result = super.call(
      "MAX_TOTAL_BALANCE",
      "MAX_TOTAL_BALANCE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOTAL_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOTAL_BALANCE",
      "MAX_TOTAL_BALANCE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SPLITS_WEIGHT(): BigInt {
    let result = super.call(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_SPLITS_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPausers(): Array<Address> {
    let result = super.call("allPausers", "allPausers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allPausers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allPausers", "allPausers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceAt(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__balanceAtInputCurrReceiversStruct>,
    timestamp: BigInt
  ): BigInt {
    let result = super.call(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint256)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceAt(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__balanceAtInputCurrReceiversStruct>,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint256)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(userId: BigInt, erc20: Address): BigInt {
    let result = super.call("collect", "collect(uint256,address):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(userId),
      ethereum.Value.fromAddress(erc20)
    ]);

    return result[0].toBigInt();
  }

  try_collect(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectable(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_collectable(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cycleSecs(): BigInt {
    let result = super.call("cycleSecs", "cycleSecs():(uint32)", []);

    return result[0].toBigInt();
  }

  try_cycleSecs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleSecs", "cycleSecs():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dripsState(userId: BigInt, erc20: Address): DripsHub__dripsStateResult {
    let result = super.call(
      "dripsState",
      "dripsState(uint256,address):(bytes32,bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return new DripsHub__dripsStateResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_dripsState(
    userId: BigInt,
    erc20: Address
  ): ethereum.CallResult<DripsHub__dripsStateResult> {
    let result = super.tryCall(
      "dripsState",
      "dripsState(uint256,address):(bytes32,bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__dripsStateResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  driverAddress(driverId: BigInt): Address {
    let result = super.call(
      "driverAddress",
      "driverAddress(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(driverId)]
    );

    return result[0].toAddress();
  }

  try_driverAddress(driverId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "driverAddress",
      "driverAddress(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(driverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashDrips(receivers: Array<DripsHub__hashDripsInputReceiversStruct>): Bytes {
    let result = super.call(
      "hashDrips",
      "hashDrips((uint256,uint256)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashDrips(
    receivers: Array<DripsHub__hashDripsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashDrips",
      "hashDrips((uint256,uint256)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashDripsHistory(
    oldDripsHistoryHash: Bytes,
    dripsHash: Bytes,
    updateTime: BigInt,
    maxEnd: BigInt
  ): Bytes {
    let result = super.call(
      "hashDripsHistory",
      "hashDripsHistory(bytes32,bytes32,uint32,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(oldDripsHistoryHash),
        ethereum.Value.fromFixedBytes(dripsHash),
        ethereum.Value.fromUnsignedBigInt(updateTime),
        ethereum.Value.fromUnsignedBigInt(maxEnd)
      ]
    );

    return result[0].toBytes();
  }

  try_hashDripsHistory(
    oldDripsHistoryHash: Bytes,
    dripsHash: Bytes,
    updateTime: BigInt,
    maxEnd: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashDripsHistory",
      "hashDripsHistory(bytes32,bytes32,uint32,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(oldDripsHistoryHash),
        ethereum.Value.fromFixedBytes(dripsHash),
        ethereum.Value.fromUnsignedBigInt(updateTime),
        ethereum.Value.fromUnsignedBigInt(maxEnd)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashSplits(
    receivers: Array<DripsHub__hashSplitsInputReceiversStruct>
  ): Bytes {
    let result = super.call(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashSplits(
    receivers: Array<DripsHub__hashSplitsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(pauser: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(pauser: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minAmtPerSec(): BigInt {
    let result = super.call("minAmtPerSec", "minAmtPerSec():(uint160)", []);

    return result[0].toBigInt();
  }

  try_minAmtPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minAmtPerSec", "minAmtPerSec():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDriverId(): BigInt {
    let result = super.call("nextDriverId", "nextDriverId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_nextDriverId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextDriverId", "nextDriverId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposedAdmin(): Address {
    let result = super.call("proposedAdmin", "proposedAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_proposedAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposedAdmin",
      "proposedAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  receivableDripsCycles(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "receivableDripsCycles",
      "receivableDripsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_receivableDripsCycles(
    userId: BigInt,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receivableDripsCycles",
      "receivableDripsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiveDrips(userId: BigInt, erc20: Address, maxCycles: BigInt): BigInt {
    let result = super.call(
      "receiveDrips",
      "receiveDrips(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return result[0].toBigInt();
  }

  try_receiveDrips(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receiveDrips",
      "receiveDrips(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiveDripsResult(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): BigInt {
    let result = super.call(
      "receiveDripsResult",
      "receiveDripsResult(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return result[0].toBigInt();
  }

  try_receiveDripsResult(
    userId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receiveDripsResult",
      "receiveDripsResult(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerDriver(driverAddr: Address): BigInt {
    let result = super.call(
      "registerDriver",
      "registerDriver(address):(uint32)",
      [ethereum.Value.fromAddress(driverAddr)]
    );

    return result[0].toBigInt();
  }

  try_registerDriver(driverAddr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerDriver",
      "registerDriver(address):(uint32)",
      [ethereum.Value.fromAddress(driverAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DripsHub__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt
  ): BigInt {
    let result = super.call(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2)
      ]
    );

    return result[0].toBigInt();
  }

  try_setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<DripsHub__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  split(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__splitInputCurrReceiversStruct>
  ): DripsHub__splitResult {
    let result = super.call(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new DripsHub__splitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_split(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<DripsHub__splitInputCurrReceiversStruct>
  ): ethereum.CallResult<DripsHub__splitResult> {
    let result = super.tryCall(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__splitResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitResult(
    userId: BigInt,
    currReceivers: Array<DripsHub__splitResultInputCurrReceiversStruct>,
    amount: BigInt
  ): DripsHub__splitResultResult {
    let result = super.call(
      "splitResult",
      "splitResult(uint256,(uint256,uint32)[],uint128):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new DripsHub__splitResultResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_splitResult(
    userId: BigInt,
    currReceivers: Array<DripsHub__splitResultInputCurrReceiversStruct>,
    amount: BigInt
  ): ethereum.CallResult<DripsHub__splitResultResult> {
    let result = super.tryCall(
      "splitResult",
      "splitResult(uint256,(uint256,uint32)[],uint128):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DripsHub__splitResultResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitsHash(userId: BigInt): Bytes {
    let result = super.call("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);

    return result[0].toBytes();
  }

  try_splitsHash(userId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  splittable(userId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_splittable(userId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  squeezeDrips(
    userId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    dripsHistory: Array<DripsHub__squeezeDripsInputDripsHistoryStruct>
  ): BigInt {
    let result = super.call(
      "squeezeDrips",
      "squeezeDrips(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(dripsHistory)
      ]
    );

    return result[0].toBigInt();
  }

  try_squeezeDrips(
    userId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    dripsHistory: Array<DripsHub__squeezeDripsInputDripsHistoryStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "squeezeDrips",
      "squeezeDrips(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(dripsHistory)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  squeezeDripsResult(
    userId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    dripsHistory: Array<DripsHub__squeezeDripsResultInputDripsHistoryStruct>
  ): BigInt {
    let result = super.call(
      "squeezeDripsResult",
      "squeezeDripsResult(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(dripsHistory)
      ]
    );

    return result[0].toBigInt();
  }

  try_squeezeDripsResult(
    userId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    dripsHistory: Array<DripsHub__squeezeDripsResultInputDripsHistoryStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "squeezeDripsResult",
      "squeezeDripsResult(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(dripsHistory)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBalance(erc20: Address): BigInt {
    let result = super.call("totalBalance", "totalBalance(address):(uint256)", [
      ethereum.Value.fromAddress(erc20)
    ]);

    return result[0].toBigInt();
  }

  try_totalBalance(erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalance",
      "totalBalance(address):(uint256)",
      [ethereum.Value.fromAddress(erc20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cycleSecs_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmitUserMetadataCall extends ethereum.Call {
  get inputs(): EmitUserMetadataCall__Inputs {
    return new EmitUserMetadataCall__Inputs(this);
  }

  get outputs(): EmitUserMetadataCall__Outputs {
    return new EmitUserMetadataCall__Outputs(this);
  }
}

export class EmitUserMetadataCall__Inputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get userMetadata(): Array<EmitUserMetadataCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      EmitUserMetadataCallUserMetadataStruct
    >();
  }
}

export class EmitUserMetadataCall__Outputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }
}

export class EmitUserMetadataCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class GrantPauserCall extends ethereum.Call {
  get inputs(): GrantPauserCall__Inputs {
    return new GrantPauserCall__Inputs(this);
  }

  get outputs(): GrantPauserCall__Outputs {
    return new GrantPauserCall__Outputs(this);
  }
}

export class GrantPauserCall__Inputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantPauserCall__Outputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeNewAdminCall extends ethereum.Call {
  get inputs(): ProposeNewAdminCall__Inputs {
    return new ProposeNewAdminCall__Inputs(this);
  }

  get outputs(): ProposeNewAdminCall__Outputs {
    return new ProposeNewAdminCall__Outputs(this);
  }
}

export class ProposeNewAdminCall__Inputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeNewAdminCall__Outputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }
}

export class ReceiveDripsCall extends ethereum.Call {
  get inputs(): ReceiveDripsCall__Inputs {
    return new ReceiveDripsCall__Inputs(this);
  }

  get outputs(): ReceiveDripsCall__Outputs {
    return new ReceiveDripsCall__Outputs(this);
  }
}

export class ReceiveDripsCall__Inputs {
  _call: ReceiveDripsCall;

  constructor(call: ReceiveDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxCycles(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReceiveDripsCall__Outputs {
  _call: ReceiveDripsCall;

  constructor(call: ReceiveDripsCall) {
    this._call = call;
  }

  get receivedAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterDriverCall extends ethereum.Call {
  get inputs(): RegisterDriverCall__Inputs {
    return new RegisterDriverCall__Inputs(this);
  }

  get outputs(): RegisterDriverCall__Outputs {
    return new RegisterDriverCall__Outputs(this);
  }
}

export class RegisterDriverCall__Inputs {
  _call: RegisterDriverCall;

  constructor(call: RegisterDriverCall) {
    this._call = call;
  }

  get driverAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDriverCall__Outputs {
  _call: RegisterDriverCall;

  constructor(call: RegisterDriverCall) {
    this._call = call;
  }

  get driverId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceAdminCall extends ethereum.Call {
  get inputs(): RenounceAdminCall__Inputs {
    return new RenounceAdminCall__Inputs(this);
  }

  get outputs(): RenounceAdminCall__Outputs {
    return new RenounceAdminCall__Outputs(this);
  }
}

export class RenounceAdminCall__Inputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall__Outputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RevokePauserCall extends ethereum.Call {
  get inputs(): RevokePauserCall__Inputs {
    return new RevokePauserCall__Inputs(this);
  }

  get outputs(): RevokePauserCall__Outputs {
    return new RevokePauserCall__Outputs(this);
  }
}

export class RevokePauserCall__Inputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokePauserCall__Outputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }
}

export class SetDripsCall extends ethereum.Call {
  get inputs(): SetDripsCall__Inputs {
    return new SetDripsCall__Inputs(this);
  }

  get outputs(): SetDripsCall__Outputs {
    return new SetDripsCall__Outputs(this);
  }
}

export class SetDripsCall__Inputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SetDripsCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDripsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsCallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDripsCallNewReceiversStruct
    >();
  }

  get maxEndHint1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxEndHint2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SetDripsCall__Outputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDripsCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsCallNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receivers(): Array<SetSplitsCallReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }
}

export class SetSplitsCallReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SplitCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SplitCallCurrReceiversStruct
    >();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get collectableAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get splitAmt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SplitCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SqueezeDripsCall extends ethereum.Call {
  get inputs(): SqueezeDripsCall__Inputs {
    return new SqueezeDripsCall__Inputs(this);
  }

  get outputs(): SqueezeDripsCall__Outputs {
    return new SqueezeDripsCall__Outputs(this);
  }
}

export class SqueezeDripsCall__Inputs {
  _call: SqueezeDripsCall;

  constructor(call: SqueezeDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get senderId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get historyHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get dripsHistory(): Array<SqueezeDripsCallDripsHistoryStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SqueezeDripsCallDripsHistoryStruct
    >();
  }
}

export class SqueezeDripsCall__Outputs {
  _call: SqueezeDripsCall;

  constructor(call: SqueezeDripsCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SqueezeDripsCallDripsHistoryStruct extends ethereum.Tuple {
  get dripsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<SqueezeDripsCallDripsHistoryReceiversStruct> {
    return this[1].toTupleArray<SqueezeDripsCallDripsHistoryReceiversStruct>();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class SqueezeDripsCallDripsHistoryReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateDriverAddressCall extends ethereum.Call {
  get inputs(): UpdateDriverAddressCall__Inputs {
    return new UpdateDriverAddressCall__Inputs(this);
  }

  get outputs(): UpdateDriverAddressCall__Outputs {
    return new UpdateDriverAddressCall__Outputs(this);
  }
}

export class UpdateDriverAddressCall__Inputs {
  _call: UpdateDriverAddressCall;

  constructor(call: UpdateDriverAddressCall) {
    this._call = call;
  }

  get driverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newDriverAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateDriverAddressCall__Outputs {
  _call: UpdateDriverAddressCall;

  constructor(call: UpdateDriverAddressCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
